export interface IFixerRates {
    readonly [currency: string]: number;
}
export interface IFixerResponse {
    readonly base: string;
    readonly date: string;
    readonly rates: IFixerRates;
    readonly error?: {
        type: string;
        info: string;
    };
}
export interface IReqOpts {
    base?: string;
    symbols?: string[];
    access_key?: string;
}
export declare abstract class Fixer {
    baseUrl: string;
    constructor(opts?: any);
    forDate(date: any, opts?: any): Promise<IFixerResponse>;
    latest(opts?: any): Promise<IFixerResponse>;
    private filterOptions(opts);
    protected abstract request(url: string, opts: any): Promise<IFixerResponse>;
}
