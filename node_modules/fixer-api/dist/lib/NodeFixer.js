'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var request_1 = require("request");
var querystring_1 = require("querystring");
var Fixer_1 = require("./Fixer");
var NodeFixer = (function (_super) {
    __extends(NodeFixer, _super);
    function NodeFixer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NodeFixer.prototype.request = function (path, opts) {
        var _this = this;
        if (!opts.access_key) {
            return Promise.reject(new Error('access_key is required to use fixer'));
        }
        return new Promise(function (resolve, reject) {
            request_1.get("" + _this.baseUrl + path + "?" + querystring_1.stringify(opts), function (err, resp, body) {
                if (err) {
                    reject(err);
                    return;
                }
                if (!body) {
                    reject(new Error('Empty response body'));
                    return;
                }
                var parsedBody;
                try {
                    parsedBody = JSON.parse(body);
                }
                catch (e) {
                    reject(new Error('Failed to parse JSON body'));
                    return;
                }
                if (parsedBody.error) {
                    reject(new Error(parsedBody.error.type + ": " + parsedBody.error.info));
                    return;
                }
                resolve(parsedBody);
            });
        });
    };
    return NodeFixer;
}(Fixer_1.Fixer));
exports.default = NodeFixer;
